Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-nsmnow-admin-scripts (20120724-0ubuntu0securityonion117) precise; urgency=low
 .
   * Issue 241: NSM scripts should have a timeout period when stopping services
   * Issue 392: Patch for lib-nsm-common-utils from Mark Seiden
   * Issue 714: nsm_server_user-disable
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- /dev/null
+++ securityonion-nsmnow-admin-scripts-20120724/README.md
@@ -0,0 +1 @@
+# securityonion-nsmnow-admin-scripts
--- /dev/null
+++ securityonion-nsmnow-admin-scripts-20120724/usr/sbin/nsm_server_user-disable
@@ -0,0 +1,173 @@
+#!/bin/bash
+#
+# Copyright (C) 2008-2009 SecurixLive   <dev@securixlive.com>
+# Modified by Doug Burks for Security Onion
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License Version 2 as
+# published by the Free Software Foundation.  You may not use, modify or
+# distribute this program under any other version of the GNU General
+# Public License.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+#
+
+#
+# INCLUDES
+#
+INC="/etc/nsm/administration.conf"
+. $INC
+
+. $NSM_LIB_DIR/lib-console-utils
+. $NSM_LIB_DIR/lib-nsm-common-utils
+. $NSM_LIB_DIR/lib-nsm-server-utils
+
+#
+# USAGE
+#
+print_usage()
+{
+	echo 
+	echo "The NSMnow Administration scripts are designed to easily configure and manage"
+	echo "your NSM installation. Bugs, comments and flames can be directed to the"
+	echo "SXL team at dev@securixlive.com"
+	echo
+	echo "The NSMnow Administration scripts come with ABSOLUTELY NO WARRANTY."
+	echo 
+	echo "Usage: ${0} [options]"
+	echo
+	echo "Options:"
+	echo "    -d         Use dialog mode"
+	echo "    -y         Force yes"
+	echo "    -V         Show version information"
+	echo "    -?         Show usage information"
+	echo 
+	echo "Long Options: "
+	echo "    --server-name=<name>             Define name of server"
+	echo "    --user-name=<name>               Define name of user to disable"
+	echo
+	echo "    --dialog                         Same as -d"
+	echo "    --force-yes                      Same as -y"
+	echo
+	echo "    --version                        Same as -V"
+	echo "    --help                           Same as -?"
+	echo 
+}
+
+# script specific variables
+PROMPT_SCRIPT="Disable User"
+PROMPT_MODE="cli"
+FORCE_YES=""
+
+# server specific variables
+SERVER_NAME=""
+USER_NAME=""
+USER_PASS=""
+
+# extract necessary pre-check arguments from the commandline
+while [ "${#}" -gt 0 ]
+do
+	case ${1} in
+		"-d" | "--dialog")
+			PROMPT_MODE=dialog
+			;;
+		"-y" | "--force-yes")
+			FORCE_YES=yes
+			;;
+		"-?" | "--help")
+			SHOW_HELP_ONLY=yes
+			;;
+		"-V" | "--version")
+			SHOW_VERSION_ONLY=yes
+			;;
+		--server-name*)
+			SERVER_NAME=$(echo $1 | cut -d "=" -f 2)
+			;;
+		--user-name*)
+			USER_NAME=$(echo $1 | cut -d "=" -f 2)
+			;;
+		--sensor*)
+			# any sensor directive is clearly meant for the sensor
+			exit 0
+			;;
+        *)
+			echo_error_msg 0 "OOPS: Unknown option \"${1}\" found!"
+			print_usage
+			exit 1
+            ;;
+	esac
+	shift
+done
+
+# check for help or version requests
+if [ -n "${SHOW_HELP_ONLY}" ]
+then
+	print_usage
+	exit 0
+elif [ -n "${SHOW_VERSION_ONLY}" ]
+then
+	print_version
+	exit 0
+fi
+
+# ensure we are root user before continuing any further
+is_root
+if [ "${?}" -ne 0 ]
+then
+	echo_error_msg 0 "OOPS: Must be root to run this script!"
+	exit 1;
+fi
+	
+#
+# COLLECT INPUT
+#
+
+SERVER_NAME="securityonion"
+
+# check that the server DOES exist via its config
+if [ ! -f "/etc/nsm/${SERVER_NAME}/server.conf" ]
+then
+	echo_error_msg 0 "OOPS: The server \"${SERVER_NAME}\" does not exist!"
+	exit 1
+else
+	# load existing variables for the server
+	. /etc/nsm/${SERVER_NAME}/server.conf
+fi
+
+# collect user name
+if [ -z "${USER_NAME}" ]
+then
+	prompt_user_input "User Name" "Enter the name of the user that will be disabled (Sguil/Squert/ELSA)" ""
+
+	[ "${?}" -ne 0 ] && exit 1
+	USER_NAME=${PROMPT_RET}
+fi
+
+# prompt to disable the user
+prompt_user_yesno "Disable User" "The following information has been collected:\n\n  user:        ${USER_NAME}\n\nDo you want to disable?" "Y"
+[ "${?}" -ne 0 ] && exit 1
+
+[ "${PROMPT_RET}" != "Y" -a "${PROMPT_RET}" != "y" ] && exit 1
+
+#
+# DISABLE
+#
+
+# disable
+echo_msg 0 "Disabling user: ${USER_NAME}"
+/usr/bin/sguild -disableuser "${USER_NAME}" >/dev/null 2>&1
+if [ "${?}" -ne 0 ]
+then
+	echo_error_msg 1 "user could not be disabled!"
+else
+	echo_msg 0 "${USER_NAME} successfully disabled."
+fi
+
+exit 0
--- securityonion-nsmnow-admin-scripts-20120724.orig/usr/lib/nsmnow/lib-nsm-common-utils
+++ securityonion-nsmnow-admin-scripts-20120724/usr/lib/nsmnow/lib-nsm-common-utils
@@ -32,6 +32,8 @@
 #	     Rotate log files and keep a maximum of 10
 # 20120202 - process_restart needs to wait for process to terminate gracefully before
 #	     rotating log file
+# 20150407 - timeout created for hung processes during restart
+#	     correct erroneous string match in 'ps' of running process (credit Mark Seiden). - Tim Whisnant
 
 #
 # GLOBAL CONSTANTS
@@ -916,7 +918,8 @@ process_start()
         	PID=$(cat $PID_FILE)
 
 		# confirm if expect is running (ie. possible stale PID)
-		if [ -z "${PID}" ] || [ $(ps -ef | grep $APP | grep $PID | grep -v grep | wc -l) -eq 0 ]
+		#if [ -z "${PID}" ] || [ $(ps -ef | grep $APP | grep $PID | grep -v grep | wc -l) -eq 0 ]
+		if [ -z "${PID}" ] || [ $(ps -f --no-headers -p ${PID} | wc -l) -eq 0 ]
 		then
 			STALE_PID_FOUND="yes"
 			echo_msg_end 2 "stale PID file found, deleting!"
@@ -974,12 +977,14 @@ process_start()
 	PID_ALT=$(ps ax | grep -v grep | grep "$APP $APP_OPTIONS" | awk '{print $1}' | head -n 1)
 
 	# confirm we are running by checking PID is still valid
-	if [ "$(ps ax | awk '{print $1}' | grep $PID | grep -v grep | wc -l)" -ne 0 ]
+	#if [ "$(ps ax | awk '{print $1}' | grep $PID | grep -v grep | wc -l)" -ne 0 ]
+	if [ "$(ps -f --no-headers -p ${PID} | wc -l)" -ne 0 ]
 	then
 		echo_msg_end 0
 		echo $PID >$PID_FILE
 	# alternatively check if PID_ALT is still valid
-	elif [ -n "${PID_ALT}" ] && [ "$(ps ax | awk '{print $1}' | grep $PID_ALT | grep -v grep | wc -l)" -ne 0 ]
+	#elif [ -n "${PID_ALT}" ] && [ "$(ps ax | awk '{print $1}' | grep $PID_ALT | grep -v grep | wc -l)" -ne 0 ]
+	elif [ -n "${PID_ALT}" ] && [ "$(ps -f --no-headers -p ${PID_ALT} | wc -l)" -ne 0 ]
 	then
 		echo_msg_end 0
 		echo $PID_ALT >$PID_FILE
@@ -1023,20 +1028,23 @@ process_stop()
 		PID=$(cat $PID_FILE)
 
 		# check if PID already running
-		if [ -z "${PID}" ] || [ $(ps -ef | grep $APP | grep $PID | grep -v grep | wc -l) -eq 0 ]
+		if [ -z "${PID}" ] || [ $(ps -f --no-headers -p ${PID} | wc -l) -eq 0 ]
 		then
 		    echo_msg_end 2 "not running"
 		    echo_msg 2 "stale PID file found, deleting!"
 		    rm -f $PID_FILE
 		else
 			kill $PID
-			if [ ${?} -eq 0 ]
-			then
-				rm -f $PID_FILE
-				echo_msg_end 0
-			else
-				echo_msg_end 1
+			WaitCount=1
+			while [[ `ps -f --no-headers -p ${PID} | wc -l` -eq 1 && $WaitCount -le 30 ]]; do sleep 1 && WaitCount=$((WaitCount+1)); done
+			if [[ $(ps -f --no-headers -p ${PID} | wc -l) -eq 1 && $WaitCount -gt 30 ]];
+				then
+					#"Process hung, killed forcibly"
+					kill -9 $PID
 			fi
+				
+			rm -f $PID_FILE
+			echo_msg_end 0
 		fi
     else
         echo_msg_end 2 "not running"
@@ -1083,7 +1091,8 @@ process_restart()
 		# Ask the process to shut down
 		process_stop "$APP" "$PID_FILE" "$APP_DESC"
 		# Wait for the process to terminate gracefully
-		while [ `ps aux |grep $PID |grep -v grep |wc -l` -eq 1 ] ; do sleep 1; done
+		#while [ `ps aux |grep $APP |grep $PID |grep -v grep |wc -l` -eq 1 ] ; do sleep 1; done
+		while [ `ps -f --no-headers -p ${PID} | wc -l` -eq 1 ] ; do sleep 1; done
 	fi
 
 	# Rotate the log file and keep a maximum of 10	
@@ -1136,7 +1145,8 @@ process_restart_if_stale()
                 PID=$(cat $PID_FILE)
 
                 # check if PID already running
-                if [ "$(ps -ef | grep $APP | grep $PID | grep -v grep | wc -l)" -eq 0 ]
+                #if [ "$(ps -ef | grep $APP | grep $PID | grep -v grep | wc -l)" -eq 0 ]
+		if [ $(ps -f --no-headers -p ${PID} | wc -l) -eq 0 ]
                 then
                         #echo_msg_end 1
                         echo_msg 1 "stale PID file found, deleting!"
@@ -1194,7 +1204,8 @@ process_restart_with_overlap()
 	if [ -f "${PID_FILE}" ]
 	then
         	OLD_PID=$(cat $PID_FILE)
-		if [ -z "${OLD_PID}" ] || [ $(ps -ef | grep $APP | grep $OLD_PID | grep -v grep | wc -l) -eq 0 ]
+		#if [ -z "${OLD_PID}" ] || [ $(ps -ef | grep $APP | grep $OLD_PID | grep -v grep | wc -l) -eq 0 ]
+		if [ -z "${OLD_PID}" ] || [ $(ps -f --no-headers -p ${OLD_PID} | wc -l) -eq 0 ]
 		then
 			echo_msg 2 "stale PID file found, deleting!"
 			rm -f $PID_FILE
@@ -1251,7 +1262,8 @@ process_status()
 		PID=$(cat $PID_FILE)
 
 		# check if PID already running
-		if [ "$(ps -ef | grep $APP | grep $PID | grep -v grep | wc -l)" -eq 0 ]
+		#if [ "$(ps -ef | grep $APP | grep $PID | grep -v grep | wc -l)" -eq 0 ]
+		if [ $(ps -f --no-headers -p ${PID} | wc -l) -eq 0 ]
 		then
 			echo_msg_end 1
 			echo_msg 1 "stale PID file found, process will be restarted at the next 5-minute interval!"
