Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-nsmnow-admin-scripts (20120724-0ubuntu0securityonion160) trusty; urgency=medium
 .
   * Issue 1162: NSM: Add new script to clear sensor backlog
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- /dev/null
+++ securityonion-nsmnow-admin-scripts-20120724/usr/sbin/so-clear-backlog
@@ -0,0 +1,121 @@
+#!/bin/bash
+. /usr/sbin/so-common
+
+. /etc/nsm/securityonion.conf
+
+if [ -d /nsm/sensor_data ]; then
+	:
+else
+	echo "Not a sensor!  Exiting..."
+	exit 1;
+fi
+
+SKIP=0
+
+#########################################
+# Options
+#########################################
+usage()
+{
+cat <<EOF
+Security Onion Backlog Purge
+  Options:
+  -h         This message
+  -y         Skip interactive mode
+
+EOF
+}
+
+while getopts "h:y" OPTION
+do
+        case $OPTION in
+                h)
+                        usage
+                        exit 0
+                        ;;
+                y)
+                        SKIP=1
+                        ;;
+                *)
+                        usage
+                        exit 0
+                        ;;
+        esac
+done
+
+if [ $SKIP -ne 1 ] ; then
+	echo
+	echo "This script can be used to clear a backlog of unified2 files from"
+	echo "sensor data directories."
+	echo
+	echo "Please use this script with caution, as it will delete the following files:"
+	echo
+
+	if [ "$ENGINE" == "snort" ]; then
+		# Get count and listing of files
+		COUNT=$(ls -la /nsm/sensor_data/*/snort-*/snort.unified2.* | wc -l)
+		ls -la /nsm/sensor_data/*/snort-*/snort.unified2.*
+	else
+        	# Get count and listing of files
+		COUNT=$(ls -la /nsm/sensor_data/*/snort.unified2.* | wc -l)
+		ls -la /nsm/sensor_data/*/snort.unified2.*
+	fi
+	echo
+	
+	[[ ! -z $COUNT ]] && echo "$COUNT file(s) will be deleted."
+
+	echo
+	echo "If you wish to continue, please type YES and press the ENTER key"
+	echo
+	read INPUT
+        if [ "$INPUT" != "YES" ] ; then exit 0; fi
+fi
+echo
+
+# Exit if no files are found.
+[ "$COUNT" -eq 0 ] && echo "No files to delete!  Exiting..." && echo && exit 0
+
+# We're about to use pgrep to search for the $ENGINE process (snort or suricata).
+# "pgrep suricata" won't work since the process shows up as Suricata,
+# so do "pgrep Suricata" instead.
+[ "$ENGINE" == "suricata" ] && ENGINE="Suricata"
+
+# Check to see if Snort/Suricata is running -- if it is, stop it.
+if pgrep $ENGINE > /dev/null; then
+	echo "Stopping $ENGINE..."
+	nsm_sensor_ps-stop --only-snort-alert > /dev/null
+fi
+
+# Check to see if barnyard2 is running -- if it is, stop it.
+if pgrep barnyard2 > /dev/null; then
+	echo "Stopping barnyard2..."
+	nsm_sensor_ps-stop --only-barnyard2 > /dev/null
+fi
+
+# If process is still not stopped, warn user and exit script.
+if pgrep $ENGINE > /dev/null; then
+	echo "$ENGINE has not been stopped -- please manually stop it."
+	exit 0;
+fi
+if pgrep barnyard2 > /dev/null; then
+	echo "Barnyard2 has not been stopped -- please manually stop it."
+	exit 0;
+fi
+
+# Remove files
+echo
+echo "Deleting files..."
+if [ "$ENGINE" == "snort" ]; then
+	rm -f /nsm/sensor_data/*/snort-*/snort.unified2.*
+else
+	rm -f /nsm/sensor_data/*/snort.unified2.*	
+fi
+
+# Start processes back up
+echo
+! pgrep barnyard2 && echo "Starting barnyard2..." && nsm_sensor_ps-start --only-barnyard2 > /dev/null
+! pgrep $ENGINE && echo "Starting $ENGINE..." && nsm_sensor_ps-start --only-snort-alert > /dev/null
+
+echo
+echo "Finished!"
+echo
--- /dev/null
+++ securityonion-nsmnow-admin-scripts-20120724/usr/sbin/so-common
@@ -0,0 +1,15 @@
+#!/bin/bash
+
+# Check for prerequisites
+if [ "$(id -u)" -ne 0 ]; then
+        echo "This script must be run using sudo!"
+        exit 1
+fi
+
+# Define a banner to separate sections
+banner="========================================================================="
+
+header() {
+        echo
+        printf '%s\n' "$banner" "$*" "$banner"
+}
