#!/bin/bash
#
# Copyright (C) 2008-2009 SecurixLive   <dev@securixlive.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

#
# Descrition:
#   Common utilities used by NSMnow for unified and standardised console
# printing and logging.
#

#
# CONSOLE CONSTANTS
#

test -n "$CONSOLE" || CONSOLE=$(tty)
eval $(stty size 2>/dev/null | (read L C; echo COLUMNS=${C}))
COLUMNS=${COLUMNS:-128}

#
# COLOUR CONSTANTS
#

# Check to see if we're running on a tty
# If not running on a tty, don't use color codes
# this is needed so that we can run salt as follows:
# sudo salt '*' cmd.run 'service nsm status'
# and have output that looks correct
if [ "$CONSOLE" = "not a tty" ]; then
	RESET=""
	CRE=""
	CLEAR=""
	STAT=""
	NORMAL=""
	RED_BOLD=""
	RED=""
	GREEN_BOLD=""
	GREEN=""
	YELLOW_BOLD=""
	YELLOW=""
	BLUE_BOLD=""
	BLUE=""
	MAGENTA_BOLD=""
	MAGENTA=""
	CYAN_BOLD=""
	CYAN=""
	WHITE_BOLD=""
	WHITE=""
else
	RESET="]R"					# Reset fb color mode
	CRE="[K"					# Erase to end of line
	CLEAR="c"						# Clear and reset screen
	STAT="[${COLUMNS}C[8D"	# Set message tag position (8 chars from right)
	NORMAL="[0;39m"				# Normal color
	RED_BOLD="[1;31m"				# Red: Failure/error messages
	RED="[0;31m"					# Red: Failure/error messages
	GREEN_BOLD="[1;32m"			# Green: Success messages
	GREEN="[0;32m"				# Green: Success messages
	YELLOW_BOLD="[1;33m"			# Yellow: Warning messages
	YELLOW="[0;33m"				# Yellow: Warning messages
	BLUE_BOLD="[1;34m"			# Blue: System messages
	BLUE="[0;34m"					# Blue: System messages
	MAGENTA_BOLD="[1;35m"			# Magenta: Found devices or drivers
	MAGENTA="[0;35m"				# Magenta: Found devices or drivers
	CYAN_BOLD="[1;36m"			# Cyan: Questions
	CYAN="[0;36m"					# Cyan: Questions
	WHITE_BOLD="[1;37m"			# Bold White: Hint
	WHITE="[0;37m"				# Bold White: Hint
fi

NSM_MESSAGES="/var/log/messages.nsm"

#
# MESSAGE FUNCTIONS
#

#
# echo_msg_begin()
#
# Starts a standardised message to be echoed to the screen. All messages adopt
# a list style format with the option of a status that is right justified on
# ending.
#
# Arguments:
#   - indent (integer)	level of indent (0 = no indent)
#   - message (string)	message to be echoed
#
# Returns:
#   A zero (0) is returned on success with a non-zero (1) returned on any error.
#
echo_msg_begin()
{
	# grab arguments with sane default
	INDENT=${1:-}; shift
	
	# check for extra arguments
	if [ -z "$INDENT" -o -z "${1:-}" ]
	then
		return 1
	fi

	case $INDENT in
		0) echo -ne "${BLUE_BOLD}$@${NORMAL}" ;;
		1) echo -ne "  ${BLUE}*${NORMAL} $@" ;;
		2) echo -ne "    ${BLUE}-${NORMAL} $@" ;;
	esac
}

#
# echo_msg_end()
#
# Ends a standardised message bring echoed to the screen. All messages adopt
# a list style format with the option of a status that is right justified on
# ending.
#
# The available status vales are:
#   - 0		[  OK  ]
#   - 1		[ FAIL ]
#   - 2		[ WARN ]
#   - 254	none
#   - 255	[ .... ] (note: no new line is echoed)
#
# Arguments:
#   - status (integer)	type of status to be right justified printed
#
# Returns:
#   A zero (0) is returned on success with a non-zero (1) returned on any error.
#
echo_msg_end()
{
	# grab inputs with sane defaults
	STATUS=${1:-}; shift

	# check for arguments
	if [ -z "$STATUS" ]
	then
		return 1
	fi

	# print additional argument as appropriate
	if [ ! -z "${1:-}" ]
	then
		echo -n " ($1)"
	fi

	# print the right justified status
	case "$STATUS" in 
		0) echo "${STAT}${NORMAL}[${GREEN_BOLD}  OK  ${NORMAL}]" ;;
		2) echo "${STAT}${NORMAL}[${YELLOW_BOLD} WARN ${NORMAL}]" ;;
		254) echo "${NORMAL}" ;;
		255) echo -n "${STAT}${NORMAL}[${BLUE_BOLD} .... ${NORMAL}]" ;;
		1|*) echo "${STAT}${NORMAL}[${RED_BOLD} FAIL ${NORMAL}]" ;;
	esac
}

#
# echo_success_msg()
#
# Echo a standardised message to the screen with a status code of 0.
#
# Arguments:
#   - indent (integer)	level of indent (0 = no indent)
#   - message (string)	message to be echoed
#
# Returns:
#   A zero (0) is returned on success with a non-zero (1) returned on any error.
#
echo_success_msg()
{
	if [ -n "${1:-}" ]
	then
		echo_msg_begin $@
	fi

	echo_msg_end 0
}

#
# echo_failure_msg()
#
# Echo a standardised message to the screen with a status code of 1.
#
# Arguments:
#   - indent (integer)	level of indent (0 = no indent)
#   - message (string)	message to be echoed
#
# Returns:
#   A zero (0) is returned on success with a non-zero (1) returned on any error.
#
echo_failure_msg()
{
	if [ -n "${1:-}" ]
	then
		echo_msg_begin $@
	fi

	echo_msg_end 1 || true
}

#
# echo_warning_msg()
#
# Echo a standardised message to the screen with a status code of 2.
#
# Arguments:
#   - indent (integer)	level of indent (0 = no indent)
#   - message (string)	message to be echoed
#
# Returns:
#   A zero (0) is returned on success with a non-zero (1) returned on any error.
#
echo_warning_msg()
{
	if [ -n "${1:-}" ]
	then
		echo_msg_begin $@
	fi

	echo_msg_end 2 || true
}

#
# echo_msg()
#
# Echo a standardised message to the screen with a status code of 254.
#
# Arguments:
#   - indent (integer)	level of indent (0 = no indent)
#   - message (string)	message to be echoed
#
# Returns:
#   A zero (0) is returned on success with a non-zero (1) returned on any error.
#
echo_msg()
{
	if [ -n "${1:-}" ]
	then
		echo_msg_begin $@
	fi

	echo_msg_end 254
}

#
# echo_error_msg()
#
# Echo a standardised error message to the screen with a status code of 254.
#
# Arguments:
#   - indent (integer)	level of indent (0 = no indent)
#   - message (string)	message to be echoed
#
# Returns:
#   A zero (0) is returned on success with a non-zero (1) returned on any error.
#
echo_error_msg()
{
	# grab inputs with sane defaults
	INDENT=${1:-}; shift

	if [ -n "${1:-}" ]
	then
		echo_msg_begin $INDENT "$RED$@"
	fi

	echo_msg_end 254
}


