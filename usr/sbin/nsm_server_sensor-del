#!/bin/bash
#
# Copyright (C) 2008-2009 SecurixLive   <dev@securixlive.com>
# Modified by Doug Burks for Security Onion

#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

# Version:
# 20120202
# 
# Changelog:
# 20120202 - Don't ask for server name

#
# INCLUDES
#
INC="/etc/nsm/administration.conf"
. $INC

. $NSM_LIB_DIR/lib-console-utils
. $NSM_LIB_DIR/lib-nsm-common-utils
. $NSM_LIB_DIR/lib-nsm-server-utils

#
# USAGE
#
print_usage()
{
	echo 
	echo "The NSMnow Administration scripts are designed to easily configure and manage"
	echo "your NSM installation. Bugs, comments and flames can be directed to the"
	echo "SXL team at dev@securixlive.com"
	echo
	echo "The NSMnow Administration scripts come with ABSOLUTELY NO WARRANTY."
	echo 
	echo "Usage: $0 [options]"
	echo
	echo "Options:"
	echo "    -d         Use dialog mode"
	echo "    -y         Force yes"
	echo "    -V         Show version information"
	echo "    -?         Show usage information"
	echo 
	echo "Long Options: "
	echo "    --server-name=<name>             Define name of server"
	echo "    --sensor-name=<name>             Define name of sensor that will connect"
	echo
	echo "    --dialog                         Same as -d"
	echo "    --force-yes                      Same as -y"
	echo
	echo "    --version                        Same as -V"
	echo "    --help                           Same as -?"
	echo 
}

# script specific variables
PROMPT_SCRIPT="Delete Sensor from Server"
PROMPT_MODE="cli"
FORCE_YES=""

# server specific variables
SERVER_NAME=""
SENSOR_NAME=""

# extract necessary pre-check arguments from the commandline
while [ "$#" -gt 0 ]
do
	case $1 in
		"-d" | "--dialog")
			PROMPT_MODE=dialog
			;;
		"-y" | "--force-yes")
			FORCE_YES=yes
			;;
		"-?" | "--help")
			SHOW_HELP_ONLY=yes
			;;
		"-V" | "--version")
			SHOW_VERSION_ONLY=yes
			;;
		--server-name*)
			SERVER_NAME=$(echo $1 | cut -d "=" -f 2)
			;;
		--sensor-name*)
			SENSOR_NAME=$(echo $1 | cut -d "=" -f 2)
			;;
		--sensor*)
			# any sensor directive is clearly meant for the sensor
			exit 0
			;;
        *)
			echo_error_msg 0 "OOPS: Unknown option \"${1}\" found!"
			print_usage
			exit 1
            ;;
	esac
	shift
done

# check for help or version requests
if [ -n "$SHOW_HELP_ONLY" ]
then
	print_usage
	exit 0
elif [ -n "$SHOW_VERSION_ONLY" ]
then
	print_version
	exit 0
fi

# ensure we are root user before continuing any further
is_root
if [ "$?" -ne 0 ]
then
	echo_error_msg 0 "OOPS: Must be root to run this script!"
	exit 1;
fi
	
#
# COLLECT INPUT
#

SERVER_NAME="securityonion"

# double check a server name was given
if [ -z "$SERVER_NAME" ]
then
	echo_error_msg 0 "OOPS: You have to specify a server name!"
	exit 1
fi

# check that the server DOES exists via its config
if [ ! -f "/etc/nsm/$SERVER_NAME/server.conf" ]
then
	echo_error_msg 0 "OOPS: The server \"$SERVER_NAME\" does not exist!"
	exit 1
else
	# load existing variables for the server
	. /etc/nsm/$SERVER_NAME/server.conf
fi

# collect sensor name
if [ -z "$SENSOR_NAME" ]
then
	if [ -z "$(server_sensor_names_get $SERVER_NAME)" ]
	then
		echo_error_msg 0 "OOPS: There are no sensors to delete!"
		exit 1
	fi
		
	prompt_user_radiolist "Select Sensor" "Select the sensor you wish to delete from the server:" "${SENSOR_NAME}" "$(server_sensor_names_get $SERVER_NAME)"
	[ "$?" -ne 0 ] && exit 1
	SENSOR_NAME=$PROMPT_RET
fi

# prompt to create the server
prompt_user_yesno "Delete Sensor from Server" "The following information has been collected:\n\n  server:      $SERVER_NAME\n  sensor:      ${SENSOR_NAME}\n\nDo you want to remove?" "Y"
[ "$?" -ne 0 ] && exit 1

[ "$PROMPT_RET" != "Y" -a "$PROMPT_RET" != "y" ] && exit 1

#
# DELETE
#

# do the removal
echo_msg 0 "Deleting sensor from server: $SENSOR_NAME => $SERVER_NAME"

# delete the templates
rm -rf /nsm/server_data/$SERVER_NAME/rules/$SENSOR_NAME
if [ "$?" -ne 0 ]
then
	echo_error_msg 1 "OOPS: The sensor rules could not be deleted!"
	exit 1
fi

exit 0
