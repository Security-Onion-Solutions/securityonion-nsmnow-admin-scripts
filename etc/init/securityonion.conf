#
#/etc/init/securityonion.conf
#
description     "Security Onion"
start on (net-device-up
            and remote-filesystems
            and runlevel [2345])
stop on runlevel [016]
script
	# Some folks are having problems with link negotiation taking too long and the tunnel failing to come up.
	# This is a quick and dirty fix until we come up with a better solution.
	# If starting the securityonion services at boot-time, sleep for 60 seconds to allow link to negotiate.
        # If running Setup, we don't need to pause as the link should have already been negotiated.
        pgrep sosetup >/dev/null || sleep 60

        # If this is a SLAVE start SSH tunnel and start ELSA if required
        SSH_DIR="/root/.ssh"
        SSH_CONF="$SSH_DIR/securityonion_ssh.conf"
        if [ -f $SSH_CONF ]; then
                # Establish persistent SSH tunnel to MASTER.
                KEY="$SSH_DIR/securityonion"

                # Upstart uses sh instead of bash so we can't use "source"
                SSH_USERNAME=`grep SSH_USERNAME $SSH_CONF | cut -d\= -f2 | tail -1`
                SERVERNAME=`grep SERVERNAME $SSH_CONF | cut -d\= -f2 | tail -1`
                ELSA=`grep ELSA /etc/nsm/securityonion.conf | cut -d\= -f2 | tail -1`
                : ${ELSA:="NO"}
                if [ $ELSA = "YES" ]; then
                    # We are using ELSA so we need reverse ssh tunnel
                    # from localhost:3154 to master-node:50000+n where n
                    # is an integer.
                    ELSA_PORT=`grep ELSA_PORT $SSH_CONF | cut -d\= -f2 | tail -1`
                    : ${ELSA_PORT:="UNDEF"}
                    if [ $ELSA_PORT = "UNDEF" ] ; then
                        # The ELSA port is not set and we need to query
                        # the $SERVERNAME for a free port and an API key.
                        SSH_CMD="/usr/bin/securityonion_elsa_register.rb --register --peer-name `hostname` --force"
                        ELSA_REGISTER_RESPONSE=`ssh -i $KEY $SSH_USERNAME@$SERVERNAME $SSH_CMD`
                        ELSA_PORT=`echo $ELSA_REGISTER_RESPONSE | cut -d',' -f1`
                        ELSA_APIKEY=`echo $ELSA_REGISTER_RESPONSE | cut -d',' -f2`

                        # Copy the ELSA port back into the SSH config file for future use.
                        echo "ELSA_PORT=$ELSA_PORT" >> $SSH_CONF

                        # Update the local ELSA API key
                        /usr/bin/securityonion_elsa_register.rb --update-apikey $ELSA_APIKEY
                    else
			            REVERSE_TUNNEL="-R $ELSA_PORT:localhost:3154"
                    fi                 
                elif [ $ELSA = "NO" ]; then
	                # We are not using ELSA so there's no need for a reverse ssl tunnel
			        REVERSE_TUNNEL=""
                    # Also no need for mysql
                    [ -f /etc/init/mysql.conf ] && service mysql stop
                fi
                # If the server isn't up, we want autossh to keep retrying so we set AUTOSSH_GATETIME to 0
                export AUTOSSH_GATETIME=0
                /usr/bin/autossh -M 0 -f -q -N -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" -i "$KEY" -L 3306:127.0.0.1:3306 $REVERSE_TUNNEL $SSH_USERNAME@$SERVERNAME
        fi

        # Both SLAVES and MASTERS need to start NSM services
        service nsm start

	# check for variables in /etc/nsm/securityonion.conf
	SO_CONF="/etc/nsm/securityonion.conf"

	# default values (can override in $SO_CONF)
	XPLICO_ENABLED="no"

	# add parameters to $SO_CONF if they don't already exist
	grep XPLICO_ENABLED $SO_CONF >/dev/null || echo "XPLICO_ENABLED=no" >> $SO_CONF

	# load in user config
	XPLICO_ENABLED=`grep XPLICO_ENABLED $SO_CONF | cut -d\= -f2 | tail -1`

	[ "$XPLICO_ENABLED" = "yes" ] && /etc/init.d/xplico start

end script
